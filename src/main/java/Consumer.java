import java.time.Duration;
import java.util.Arrays;
import java.util.Properties;
import java.util.concurrent.CountDownLatch;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.errors.InterruptException;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Consumer {

    public static void main(String[] args) {

        Logger logger = LoggerFactory.getLogger(Consumer.class);

        // Crearemos las propiedades del consumidor
        Properties properties = new Properties();

        properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");

        properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());

        properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());

        // voy a definir un group id
        properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, "app");

        // como actuará el consumir la primera vez
        properties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");

        // Crearemos el consumidor

        KafkaConsumer<String, String> kafkaConsumer = new KafkaConsumer<String, String>(properties);

        kafkaConsumer.subscribe(Arrays.asList("primer-topic"));

        // Empezaremos a leer

        CountDownLatch countDownLatch = new CountDownLatch(1);

        final Runnable kafkaThread = new ConsumerThread(countDownLatch, kafkaConsumer);

        Runtime.getRuntime().addShutdownHook(new Thread() {
            public void run() {
                logger.info("parando gracefully");
                ((ConsumerThread) kafkaThread).shutdown();
                logger.info("terminado procesamiento");
            }
        });

        Thread myThread = new Thread(kafkaThread);
        myThread.start();

        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            logger.info("la aplciación ha sido interrumpida");
        }
        finally {
            kafkaConsumer.close();
            logger.info(("la aplicacion se ha cerraod"));
        }

    }
}
